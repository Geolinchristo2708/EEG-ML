import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression  # Fixed Linear Regression issue
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, silhouette_score
from sklearn.decomposition import PCA

# Load EEG Dataset
data = pd.read_csv('/content/eeg.csv')

# Display first few rows
print(data.head())

# Features & Labels
X = data.iloc[:, :-1]  
y = data.iloc[:, -1]   

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

### **SVM Model**
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train, y_train)
y_pred_svm = svm_model.predict(X_test)

# SVM Evaluation
print(f"SVM Accuracy: {accuracy_score(y_test, y_pred_svm):.2f}")
print("SVM Confusion Matrix:\n", confusion_matrix(y_test, y_pred_svm))
print("SVM Classification Report:\n", classification_report(y_test, y_pred_svm))

### **Logistic Regression Model**
log_model = LogisticRegression()
log_model.fit(X_train, y_train)
y_pred_log = log_model.predict(X_test)

# Logistic Regression Evaluation
print(f"Logistic Regression Accuracy: {accuracy_score(y_test, y_pred_log):.2f}")

### **K-Means Clustering**
# Simulated Data for K-Means
def read_data(n_samples=20, n_epochs=25, n_channels=64, time_points=100):
    return np.random.randn(n_samples, n_epochs * n_channels * time_points)

healthy_data = read_data(10)  # 10 Healthy subjects
patient_data = read_data(10)  # 10 Patients
data_combined = np.vstack([healthy_data, patient_data])

# Apply PCA before clustering
pca = PCA(n_components=2)
data_pca = pca.fit_transform(data_combined)

# K-Means Clustering
kmeans = KMeans(n_clusters=2, random_state=42)
clusters = kmeans.fit_predict(data_pca)

# Clustering Evaluation
silhouette_avg = silhouette_score(data_pca, clusters)
print(f"K-Means Silhouette Score: {silhouette_avg:.2f}")

# Plot Clustering
plt.figure(figsize=(8, 6))
plt.scatter(data_pca[:, 0], data_pca[:, 1], c=clusters, cmap='viridis', s=50)
plt.title("K-Means Clustering of EEG Data")
plt.xlabel("PCA Component 1")
plt.ylabel("PCA Component 2")
plt.show()
